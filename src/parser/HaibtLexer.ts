// Generated from ./grammar/HaibtLexer.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class HaibtLexer extends Lexer {
	public static readonly Assign = 1;
	public static readonly PlusPlus = 2;
	public static readonly MinusMinus = 3;
	public static readonly Plus = 4;
	public static readonly Minus = 5;
	public static readonly Not = 6;
	public static readonly Star = 7;
	public static readonly Slash = 8;
	public static readonly Mod = 9;
	public static readonly Power = 10;
	public static readonly LessThan = 11;
	public static readonly LessThanOrEqual = 12;
	public static readonly GreaterThan = 13;
	public static readonly GreaterThanOrEqual = 14;
	public static readonly Or = 15;
	public static readonly And = 16;
	public static readonly Equal = 17;
	public static readonly NotEqual = 18;
	public static readonly CloseTag = 19;
	public static readonly StringLiteral = 20;
	public static readonly HEX_COLOR = 21;
	public static readonly WhiteSpaces = 22;
	public static readonly LineTerminator = 23;
	public static readonly Use = 24;
	public static readonly Component = 25;
	public static readonly Style = 26;
	public static readonly Template = 27;
	public static readonly As = 28;
	public static readonly If = 29;
	public static readonly Else = 30;
	public static readonly While = 31;
	public static readonly Return = 32;
	public static readonly Switch = 33;
	public static readonly Case = 34;
	public static readonly Val = 35;
	public static readonly Var = 36;
	public static readonly Prop = 37;
	public static readonly Em = 38;
	public static readonly Rem = 39;
	public static readonly Px = 40;
	public static readonly Function = 41;
	public static readonly Type = 42;
	public static readonly Number = 43;
	public static readonly String = 44;
	public static readonly Boolean = 45;
	public static readonly Void = 46;
	public static readonly Color = 47;
	public static readonly Undefined = 48;
	public static readonly BoolValue = 49;
	public static readonly NumberValue = 50;
	public static readonly Inline = 51;
	public static readonly Render = 52;
	public static readonly Init = 53;
	public static readonly Mount = 54;
	public static readonly Unmount = 55;
	public static readonly OBracnk = 56;
	public static readonly CBracnk = 57;
	public static readonly OParen = 58;
	public static readonly CParen = 59;
	public static readonly OBrace = 60;
	public static readonly CBrace = 61;
	public static readonly SemiColon = 62;
	public static readonly Comma = 63;
	public static readonly Question = 64;
	public static readonly Colon = 65;
	public static readonly Dot = 66;
	public static readonly Ellipsis = 67;
	public static readonly Hash = 68;
	public static readonly Identifier = 69;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'='", 
                                                            "'++'", "'--'", 
                                                            "'+'", "'-'", 
                                                            "'!'", "'*'", 
                                                            "'/'", "'%'", 
                                                            "'**'", "'<'", 
                                                            "'<='", "'>'", 
                                                            "'>='", "'||'", 
                                                            "'&&'", "'=='", 
                                                            "'!='", "'</'", 
                                                            null, null, 
                                                            null, null, 
                                                            "'use'", "'component'", 
                                                            "'style'", "'template'", 
                                                            "'as'", "'if'", 
                                                            "'else'", "'while'", 
                                                            "'return'", 
                                                            "'switch'", 
                                                            "'case'", "'val'", 
                                                            "'var'", "'prop'", 
                                                            "'em'", "'rem'", 
                                                            "'px'", "'fun'", 
                                                            "'type'", "'number'", 
                                                            "'string'", 
                                                            "'boolean'", 
                                                            "'void'", "'color'", 
                                                            "'undefined'", 
                                                            null, null, 
                                                            "'inline'", 
                                                            "'render'", 
                                                            "'init'", "'mount'", 
                                                            "'unmount'", 
                                                            "'['", "']'", 
                                                            "'('", "')'", 
                                                            "'{'", "'}'", 
                                                            "';'", "','", 
                                                            "'?'", "':'", 
                                                            "'.'", "'...'", 
                                                            "'#'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "Assign", 
                                                             "PlusPlus", 
                                                             "MinusMinus", 
                                                             "Plus", "Minus", 
                                                             "Not", "Star", 
                                                             "Slash", "Mod", 
                                                             "Power", "LessThan", 
                                                             "LessThanOrEqual", 
                                                             "GreaterThan", 
                                                             "GreaterThanOrEqual", 
                                                             "Or", "And", 
                                                             "Equal", "NotEqual", 
                                                             "CloseTag", 
                                                             "StringLiteral", 
                                                             "HEX_COLOR", 
                                                             "WhiteSpaces", 
                                                             "LineTerminator", 
                                                             "Use", "Component", 
                                                             "Style", "Template", 
                                                             "As", "If", 
                                                             "Else", "While", 
                                                             "Return", "Switch", 
                                                             "Case", "Val", 
                                                             "Var", "Prop", 
                                                             "Em", "Rem", 
                                                             "Px", "Function", 
                                                             "Type", "Number", 
                                                             "String", "Boolean", 
                                                             "Void", "Color", 
                                                             "Undefined", 
                                                             "BoolValue", 
                                                             "NumberValue", 
                                                             "Inline", "Render", 
                                                             "Init", "Mount", 
                                                             "Unmount", 
                                                             "OBracnk", 
                                                             "CBracnk", 
                                                             "OParen", "CParen", 
                                                             "OBrace", "CBrace", 
                                                             "SemiColon", 
                                                             "Comma", "Question", 
                                                             "Colon", "Dot", 
                                                             "Ellipsis", 
                                                             "Hash", "Identifier" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"Assign", "PlusPlus", "MinusMinus", "Plus", "Minus", "Not", "Star", "Slash", 
		"Mod", "Power", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", 
		"Or", "And", "Equal", "NotEqual", "CloseTag", "StringLiteral", "HEX_COLOR", 
		"WhiteSpaces", "LineTerminator", "DoubleStringCharacter", "EscapeSequence", 
		"LineContinuation", "CharacterEscapeSequence", "SingleEscapeCharacter", 
		"NonEscapeCharacter", "DecimalIntegerLiteral", "Use", "Component", "Style", 
		"Template", "As", "If", "Else", "While", "Return", "Switch", "Case", "Val", 
		"Var", "Prop", "Em", "Rem", "Px", "Function", "Type", "Number", "String", 
		"Boolean", "Void", "Color", "Undefined", "BoolValue", "NumberValue", "Inline", 
		"Render", "Init", "Mount", "Unmount", "OBracnk", "CBracnk", "OParen", 
		"CParen", "OBrace", "CBrace", "SemiColon", "Comma", "Question", "Colon", 
		"Dot", "Ellipsis", "Hash", "Identifier", "IdentifierStart", "HexDigit", 
		"Digit",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, HaibtLexer._ATN, HaibtLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "HaibtLexer.g4"; }

	public get literalNames(): (string | null)[] { return HaibtLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return HaibtLexer.symbolicNames; }
	public get ruleNames(): string[] { return HaibtLexer.ruleNames; }

	public get serializedATN(): number[] { return HaibtLexer._serializedATN; }

	public get channelNames(): string[] { return HaibtLexer.channelNames; }

	public get modeNames(): string[] { return HaibtLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,69,507,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,
	74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,1,0,1,0,1,1,1,1,1,1,1,2,1,2,
	1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,
	10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
	1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,5,19,210,8,19,10,
	19,12,19,213,9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
	225,8,20,1,21,4,21,228,8,21,11,21,12,21,229,1,21,1,21,1,22,1,22,1,22,1,
	22,1,23,1,23,1,23,1,23,3,23,242,8,23,1,24,1,24,3,24,246,8,24,1,25,1,25,
	1,25,1,26,1,26,3,26,253,8,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,5,29,262,
	8,29,10,29,12,29,265,9,29,3,29,267,8,29,1,30,1,30,1,30,1,30,1,31,1,31,1,
	31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,
	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,
	36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,
	1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,
	40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,
	1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,
	48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,
	1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,
	52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
	1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,418,8,
	55,1,56,4,56,421,8,56,11,56,12,56,422,1,56,1,56,4,56,427,8,56,11,56,12,
	56,428,3,56,431,8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,
	1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,
	60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,
	1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,
	72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,1,75,1,75,1,75,5,75,497,8,75,10,75,
	12,75,500,9,75,1,76,1,76,1,77,1,77,1,78,1,78,0,0,79,1,1,3,2,5,3,7,4,9,5,
	11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
	18,37,19,39,20,41,21,43,22,45,23,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,
	24,63,25,65,26,67,27,69,28,71,29,73,30,75,31,77,32,79,33,81,34,83,35,85,
	36,87,37,89,38,91,39,93,40,95,41,97,42,99,43,101,44,103,45,105,46,107,47,
	109,48,111,49,113,50,115,51,117,52,119,53,121,54,123,55,125,56,127,57,129,
	58,131,59,133,60,135,61,137,62,139,63,141,64,143,65,145,66,147,67,149,68,
	151,69,153,0,155,0,157,0,1,0,10,4,0,9,9,11,12,32,32,160,160,3,0,10,10,13,
	13,8232,8233,2,0,34,34,92,92,9,0,34,34,39,39,92,92,98,98,102,102,110,110,
	114,114,116,116,118,118,12,0,10,10,13,13,34,34,39,39,48,57,92,92,98,98,
	102,102,110,110,114,114,116,118,120,120,1,0,49,57,2,0,48,57,95,95,3,0,65,
	90,95,95,97,122,4,0,48,57,65,70,95,95,97,102,1,0,48,57,511,0,1,1,0,0,0,
	0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
	0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
	1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
	0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,61,
	1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
	0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
	1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
	0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
	105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
	1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
	0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,
	0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,
	0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,1,159,1,0,0,0,3,161,1,0,0,0,
	5,164,1,0,0,0,7,167,1,0,0,0,9,169,1,0,0,0,11,171,1,0,0,0,13,173,1,0,0,0,
	15,175,1,0,0,0,17,177,1,0,0,0,19,179,1,0,0,0,21,182,1,0,0,0,23,184,1,0,
	0,0,25,187,1,0,0,0,27,189,1,0,0,0,29,192,1,0,0,0,31,195,1,0,0,0,33,198,
	1,0,0,0,35,201,1,0,0,0,37,204,1,0,0,0,39,207,1,0,0,0,41,216,1,0,0,0,43,
	227,1,0,0,0,45,233,1,0,0,0,47,241,1,0,0,0,49,245,1,0,0,0,51,247,1,0,0,0,
	53,252,1,0,0,0,55,254,1,0,0,0,57,256,1,0,0,0,59,266,1,0,0,0,61,268,1,0,
	0,0,63,272,1,0,0,0,65,282,1,0,0,0,67,288,1,0,0,0,69,297,1,0,0,0,71,300,
	1,0,0,0,73,303,1,0,0,0,75,308,1,0,0,0,77,314,1,0,0,0,79,321,1,0,0,0,81,
	328,1,0,0,0,83,333,1,0,0,0,85,337,1,0,0,0,87,341,1,0,0,0,89,346,1,0,0,0,
	91,349,1,0,0,0,93,353,1,0,0,0,95,356,1,0,0,0,97,360,1,0,0,0,99,365,1,0,
	0,0,101,372,1,0,0,0,103,379,1,0,0,0,105,387,1,0,0,0,107,392,1,0,0,0,109,
	398,1,0,0,0,111,417,1,0,0,0,113,420,1,0,0,0,115,432,1,0,0,0,117,439,1,0,
	0,0,119,446,1,0,0,0,121,451,1,0,0,0,123,457,1,0,0,0,125,465,1,0,0,0,127,
	467,1,0,0,0,129,469,1,0,0,0,131,471,1,0,0,0,133,473,1,0,0,0,135,475,1,0,
	0,0,137,477,1,0,0,0,139,479,1,0,0,0,141,481,1,0,0,0,143,483,1,0,0,0,145,
	485,1,0,0,0,147,487,1,0,0,0,149,491,1,0,0,0,151,493,1,0,0,0,153,501,1,0,
	0,0,155,503,1,0,0,0,157,505,1,0,0,0,159,160,5,61,0,0,160,2,1,0,0,0,161,
	162,5,43,0,0,162,163,5,43,0,0,163,4,1,0,0,0,164,165,5,45,0,0,165,166,5,
	45,0,0,166,6,1,0,0,0,167,168,5,43,0,0,168,8,1,0,0,0,169,170,5,45,0,0,170,
	10,1,0,0,0,171,172,5,33,0,0,172,12,1,0,0,0,173,174,5,42,0,0,174,14,1,0,
	0,0,175,176,5,47,0,0,176,16,1,0,0,0,177,178,5,37,0,0,178,18,1,0,0,0,179,
	180,5,42,0,0,180,181,5,42,0,0,181,20,1,0,0,0,182,183,5,60,0,0,183,22,1,
	0,0,0,184,185,5,60,0,0,185,186,5,61,0,0,186,24,1,0,0,0,187,188,5,62,0,0,
	188,26,1,0,0,0,189,190,5,62,0,0,190,191,5,61,0,0,191,28,1,0,0,0,192,193,
	5,124,0,0,193,194,5,124,0,0,194,30,1,0,0,0,195,196,5,38,0,0,196,197,5,38,
	0,0,197,32,1,0,0,0,198,199,5,61,0,0,199,200,5,61,0,0,200,34,1,0,0,0,201,
	202,5,33,0,0,202,203,5,61,0,0,203,36,1,0,0,0,204,205,5,60,0,0,205,206,5,
	47,0,0,206,38,1,0,0,0,207,211,5,34,0,0,208,210,3,47,23,0,209,208,1,0,0,
	0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,214,1,0,0,0,213,211,
	1,0,0,0,214,215,5,34,0,0,215,40,1,0,0,0,216,217,3,149,74,0,217,218,3,155,
	77,0,218,219,3,155,77,0,219,224,3,155,77,0,220,221,3,155,77,0,221,222,3,
	155,77,0,222,223,3,155,77,0,223,225,1,0,0,0,224,220,1,0,0,0,224,225,1,0,
	0,0,225,42,1,0,0,0,226,228,7,0,0,0,227,226,1,0,0,0,228,229,1,0,0,0,229,
	227,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,232,6,21,0,0,232,44,1,0,
	0,0,233,234,7,1,0,0,234,235,1,0,0,0,235,236,6,22,0,0,236,46,1,0,0,0,237,
	242,8,2,0,0,238,239,5,92,0,0,239,242,3,49,24,0,240,242,3,51,25,0,241,237,
	1,0,0,0,241,238,1,0,0,0,241,240,1,0,0,0,242,48,1,0,0,0,243,246,3,53,26,
	0,244,246,5,48,0,0,245,243,1,0,0,0,245,244,1,0,0,0,246,50,1,0,0,0,247,248,
	5,92,0,0,248,249,7,1,0,0,249,52,1,0,0,0,250,253,3,55,27,0,251,253,3,57,
	28,0,252,250,1,0,0,0,252,251,1,0,0,0,253,54,1,0,0,0,254,255,7,3,0,0,255,
	56,1,0,0,0,256,257,8,4,0,0,257,58,1,0,0,0,258,267,5,48,0,0,259,263,7,5,
	0,0,260,262,7,6,0,0,261,260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,
	264,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,266,258,1,0,0,0,266,259,1,0,
	0,0,267,60,1,0,0,0,268,269,5,117,0,0,269,270,5,115,0,0,270,271,5,101,0,
	0,271,62,1,0,0,0,272,273,5,99,0,0,273,274,5,111,0,0,274,275,5,109,0,0,275,
	276,5,112,0,0,276,277,5,111,0,0,277,278,5,110,0,0,278,279,5,101,0,0,279,
	280,5,110,0,0,280,281,5,116,0,0,281,64,1,0,0,0,282,283,5,115,0,0,283,284,
	5,116,0,0,284,285,5,121,0,0,285,286,5,108,0,0,286,287,5,101,0,0,287,66,
	1,0,0,0,288,289,5,116,0,0,289,290,5,101,0,0,290,291,5,109,0,0,291,292,5,
	112,0,0,292,293,5,108,0,0,293,294,5,97,0,0,294,295,5,116,0,0,295,296,5,
	101,0,0,296,68,1,0,0,0,297,298,5,97,0,0,298,299,5,115,0,0,299,70,1,0,0,
	0,300,301,5,105,0,0,301,302,5,102,0,0,302,72,1,0,0,0,303,304,5,101,0,0,
	304,305,5,108,0,0,305,306,5,115,0,0,306,307,5,101,0,0,307,74,1,0,0,0,308,
	309,5,119,0,0,309,310,5,104,0,0,310,311,5,105,0,0,311,312,5,108,0,0,312,
	313,5,101,0,0,313,76,1,0,0,0,314,315,5,114,0,0,315,316,5,101,0,0,316,317,
	5,116,0,0,317,318,5,117,0,0,318,319,5,114,0,0,319,320,5,110,0,0,320,78,
	1,0,0,0,321,322,5,115,0,0,322,323,5,119,0,0,323,324,5,105,0,0,324,325,5,
	116,0,0,325,326,5,99,0,0,326,327,5,104,0,0,327,80,1,0,0,0,328,329,5,99,
	0,0,329,330,5,97,0,0,330,331,5,115,0,0,331,332,5,101,0,0,332,82,1,0,0,0,
	333,334,5,118,0,0,334,335,5,97,0,0,335,336,5,108,0,0,336,84,1,0,0,0,337,
	338,5,118,0,0,338,339,5,97,0,0,339,340,5,114,0,0,340,86,1,0,0,0,341,342,
	5,112,0,0,342,343,5,114,0,0,343,344,5,111,0,0,344,345,5,112,0,0,345,88,
	1,0,0,0,346,347,5,101,0,0,347,348,5,109,0,0,348,90,1,0,0,0,349,350,5,114,
	0,0,350,351,5,101,0,0,351,352,5,109,0,0,352,92,1,0,0,0,353,354,5,112,0,
	0,354,355,5,120,0,0,355,94,1,0,0,0,356,357,5,102,0,0,357,358,5,117,0,0,
	358,359,5,110,0,0,359,96,1,0,0,0,360,361,5,116,0,0,361,362,5,121,0,0,362,
	363,5,112,0,0,363,364,5,101,0,0,364,98,1,0,0,0,365,366,5,110,0,0,366,367,
	5,117,0,0,367,368,5,109,0,0,368,369,5,98,0,0,369,370,5,101,0,0,370,371,
	5,114,0,0,371,100,1,0,0,0,372,373,5,115,0,0,373,374,5,116,0,0,374,375,5,
	114,0,0,375,376,5,105,0,0,376,377,5,110,0,0,377,378,5,103,0,0,378,102,1,
	0,0,0,379,380,5,98,0,0,380,381,5,111,0,0,381,382,5,111,0,0,382,383,5,108,
	0,0,383,384,5,101,0,0,384,385,5,97,0,0,385,386,5,110,0,0,386,104,1,0,0,
	0,387,388,5,118,0,0,388,389,5,111,0,0,389,390,5,105,0,0,390,391,5,100,0,
	0,391,106,1,0,0,0,392,393,5,99,0,0,393,394,5,111,0,0,394,395,5,108,0,0,
	395,396,5,111,0,0,396,397,5,114,0,0,397,108,1,0,0,0,398,399,5,117,0,0,399,
	400,5,110,0,0,400,401,5,100,0,0,401,402,5,101,0,0,402,403,5,102,0,0,403,
	404,5,105,0,0,404,405,5,110,0,0,405,406,5,101,0,0,406,407,5,100,0,0,407,
	110,1,0,0,0,408,409,5,116,0,0,409,410,5,114,0,0,410,411,5,117,0,0,411,418,
	5,101,0,0,412,413,5,102,0,0,413,414,5,97,0,0,414,415,5,108,0,0,415,416,
	5,115,0,0,416,418,5,101,0,0,417,408,1,0,0,0,417,412,1,0,0,0,418,112,1,0,
	0,0,419,421,7,6,0,0,420,419,1,0,0,0,421,422,1,0,0,0,422,420,1,0,0,0,422,
	423,1,0,0,0,423,430,1,0,0,0,424,426,5,46,0,0,425,427,7,6,0,0,426,425,1,
	0,0,0,427,428,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,
	424,1,0,0,0,430,431,1,0,0,0,431,114,1,0,0,0,432,433,5,105,0,0,433,434,5,
	110,0,0,434,435,5,108,0,0,435,436,5,105,0,0,436,437,5,110,0,0,437,438,5,
	101,0,0,438,116,1,0,0,0,439,440,5,114,0,0,440,441,5,101,0,0,441,442,5,110,
	0,0,442,443,5,100,0,0,443,444,5,101,0,0,444,445,5,114,0,0,445,118,1,0,0,
	0,446,447,5,105,0,0,447,448,5,110,0,0,448,449,5,105,0,0,449,450,5,116,0,
	0,450,120,1,0,0,0,451,452,5,109,0,0,452,453,5,111,0,0,453,454,5,117,0,0,
	454,455,5,110,0,0,455,456,5,116,0,0,456,122,1,0,0,0,457,458,5,117,0,0,458,
	459,5,110,0,0,459,460,5,109,0,0,460,461,5,111,0,0,461,462,5,117,0,0,462,
	463,5,110,0,0,463,464,5,116,0,0,464,124,1,0,0,0,465,466,5,91,0,0,466,126,
	1,0,0,0,467,468,5,93,0,0,468,128,1,0,0,0,469,470,5,40,0,0,470,130,1,0,0,
	0,471,472,5,41,0,0,472,132,1,0,0,0,473,474,5,123,0,0,474,134,1,0,0,0,475,
	476,5,125,0,0,476,136,1,0,0,0,477,478,5,59,0,0,478,138,1,0,0,0,479,480,
	5,44,0,0,480,140,1,0,0,0,481,482,5,63,0,0,482,142,1,0,0,0,483,484,5,58,
	0,0,484,144,1,0,0,0,485,486,5,46,0,0,486,146,1,0,0,0,487,488,5,46,0,0,488,
	489,5,46,0,0,489,490,5,46,0,0,490,148,1,0,0,0,491,492,5,35,0,0,492,150,
	1,0,0,0,493,498,3,153,76,0,494,497,3,153,76,0,495,497,3,157,78,0,496,494,
	1,0,0,0,496,495,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,
	499,152,1,0,0,0,500,498,1,0,0,0,501,502,7,7,0,0,502,154,1,0,0,0,503,504,
	7,8,0,0,504,156,1,0,0,0,505,506,7,9,0,0,506,158,1,0,0,0,15,0,211,224,229,
	241,245,252,263,266,417,422,428,430,496,498,1,0,1,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!HaibtLexer.__ATN) {
			HaibtLexer.__ATN = new ATNDeserializer().deserialize(HaibtLexer._serializedATN);
		}

		return HaibtLexer.__ATN;
	}


	static DecisionsToDFA = HaibtLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}